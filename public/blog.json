[
	{
		"id": 1,
		"ques": "When should we use context API?",
		"ans": "The React Context API is a useful tool for sharing data and managing state in a React application. You should consider using the Context API when you have data that needs to be accessed by multiple components throughout the application, or when you need to manage application-level state. By using the Context API to provide centralized data, you can avoid the need to pass data down through multiple levels of components using props, which can reduce the amount of code needed and make your code more maintainable over time. The Context API can also be used to simplify your code and avoid the problem of prop drilling. If you have a complex component tree with many levels of nesting, the Context API can provide a simpler way to share data between components without having to pass it down through each level using props. Finally, the Context API can be useful for providing global functions such as theme or language switching. If you want to allow users to switch between different themes or languages within your application, you can use the Context API to provide this functionality to all the components that need it. Overall, the Context API can be a useful tool for managing state and sharing data in a React application, especially when you need to simplify your code, avoid prop drilling, or provide global functionality."
	},
	{
		"id": 2,
		"ques": "What is custom Hook?",
		"ans": "A custom hook is a function in React that allows us to reuse logic across multiple components. It is a way to encapsulate common functionality so that it can be shared and reused in a modular way. Custom hooks allow us to abstract away complex logic, state management, or other tasks into reusable functions that can be easily used throughout your application. To create a custom hook,  simply create a function that uses React hooks such as useState, useEffect, or useContext. The function can then be used in any component that needs the functionality provided by the custom hook. Custom hooks can be used to manage state, handle API requests, implement animations, and much more. The use of custom hooks can help to reduce code duplication, make code more modular, and improve overall code maintainability. They also provide a way to separate concerns and simplify component logic, making it easier to reason about and debug your code. aIn summary, custom hooks are a way to encapsulate common functionality in a reusable function that can be easily shared and used throughout a React application. They can help to reduce code duplication, improve code maintainability, and simplify component logic."
	},
	{
		"id": 3,
		"ques": "What is useRef? and where to use it?",
		"ans": "The useRef hook is a built-in hook in React that provides a way to store a mutable value that persists across component renders. It returns a mutable ref object which can hold any value similar to an instance variable in a class component. This ref object can be used to access the DOM nodes or any other mutable value that persists across component renders. The most common use case for the useRef hook is to access DOM elements or nodes directly in a component. This is because the useRef hook provides a way to reference and manipulate the underlying DOM elements without the need to re-render the entire component. This can improve performance and reduce the amount of code needed to access and manipulate DOM elements. Another use case for the useRef hook is to persist state across multiple renders of a component. This is particularly useful when you want to store a value that needs to be accessed or updated between renders but doesn't necessarily need to trigger a re-render. In summary, the useRef hook is a powerful tool in React that can be used to reference and manipulate DOM elements or store mutable values that need to persist across renders. It can help to improve performance, reduce code duplication, and simplify component logic in your application."
	},
	{
		"id": 4,
		"ques": "What is useMemo? and where to use it?",
		"ans": "UseMemo is a React hook that allows us to optimize the performance of our application by memoizing the result of a function. This means that the result of the function is cached and only recalculated when the inputs to the function change. This can help to improve the performance of the application by reducing the number of unnecessary calculations. We should use useMemo when we have a function that is computationally expensive or requires a lot of resources to execute. UseMemo ensures that the function is only executed when it needs to be, which can help to improve the overall performance of the application. An example of when to use useMemo is when we have a function that generates a large amount of data, such as a list of items or a chart. By memoizing the result of the function, it can avoid the need to regenerate the data every time the component re-renders, which can help to improve the performance of the application. In summary, useMemo is a React hook that allows optimizing the performance of the application by memoizing the result of a function."
	}
]
